var documenterSearchIndex = {"docs":
[{"location":"generate.html#Generating-signals-1","page":"Generating signals","title":"Generating signals","text":"","category":"section"},{"location":"generate.html#","page":"Generating signals","title":"Generating signals","text":"Modules = [SignalAnalysis]\nPages   = [\"generate.jl\"]","category":"page"},{"location":"generate.html#SignalAnalysis.chirp","page":"Generating signals","title":"SignalAnalysis.chirp","text":"chirp(freq1, freq2, duration)\nchirp(freq1, freq2, duration, fs; shape, phase, window)\n\n\nGenerates a frequency modulated chirp signal from freq1 to freq2 and specified duration at frame rate fs. The type of frequency modulation may be controlled using shape (:linear (default) or :hyperbolic). The starting phase and window type may be optionally specified.\n\nExamples:\n\njulia> x = chirp(5kHz, 7kHz, 100ms, 44.1kHz)\n4411-frame, 1-channel SampleBuf{Complex{Float64}, 1}\n0.10002267573696146s sampled at 44100.0Hz\n\njulia> x = chirp(5kHz, 7kHz, 100ms, 44.1kHz; phase=45°, window=hamming)\n4411-frame, 1-channel SampleBuf{Complex{Float64}, 1}\n0.10002267573696146s sampled at 44100.0Hz\n\njulia> x = chirp(5kHz, 7kHz, 100ms, 44.1kHz; shape=:hyperbolic, window=(tukey,0.05))\n4411-frame, 1-channel SampleBuf{Complex{Float64}, 1}\n0.10002267573696146s sampled at 44100.0Hz\n\n\n\n\n\n","category":"function"},{"location":"generate.html#SignalAnalysis.cw-Tuple{Any,Any,Any}","page":"Generating signals","title":"SignalAnalysis.cw","text":"cw(freq, duration, fs; phase, window)\n\n\nGenerates a sinusoidal signal with specified freq and duration at frame rate fs. The starting phase and window type may be optionally specified.\n\nExamples:\n\njulia> x = cw(5kHz, 200ms, 44.1kHz)\n8821-frame, 1-channel SampleBuf{Complex{Float64}, 1}\n0.20002267573696145s sampled at 44100.0Hz\n\njulia> x = cw(5kHz, 200ms, 44.1kHz; window=hamming)\n8821-frame, 1-channel SampleBuf{Complex{Float64}, 1}\n0.20002267573696145s sampled at 44100.0Hz\n\njulia> x = cw(-5kHz, 200ms, 44.1kHz; phase=45°, window=(tukey, 0.05))\n8821-frame, 1-channel SampleBuf{Complex{Float64}, 1}\n0.20002267573696145s sampled at 44100.0Hz\n\n\n\n\n\n","category":"method"},{"location":"iplot.html#Interactive-plots-1","page":"Interactive plots","title":"Interactive plots","text":"","category":"section"},{"location":"iplot.html#","page":"Interactive plots","title":"Interactive plots","text":"[ TODO ]","category":"page"},{"location":"basic.html#Basic-signal-analysis-1","page":"Basic signal analysis","title":"Basic signal analysis","text":"","category":"section"},{"location":"basic.html#","page":"Basic signal analysis","title":"Basic signal analysis","text":"Modules = [SignalAnalysis]\nPages   = [\"basic.jl\"]","category":"page"},{"location":"basic.html#SignalAnalysis.energy-Tuple{AbstractArray{T,1} where T}","page":"Basic signal analysis","title":"SignalAnalysis.energy","text":"energy(s; fs)\n\n\nComputes total signal energy.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.ifrequency-Tuple{Any}","page":"Basic signal analysis","title":"SignalAnalysis.ifrequency","text":"ifrequency(s; fs)\n\n\nComputes instantaneous frequency of the signal.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.meanfrequency-Tuple{AbstractArray{T,2} where T}","page":"Basic signal analysis","title":"SignalAnalysis.meanfrequency","text":"meanfrequency(s; fs, nfft, window)\n\n\nComputes mean frequency of a signal.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.meantime-Tuple{SampledSignals.SampleBuf}","page":"Basic signal analysis","title":"SignalAnalysis.meantime","text":"meantime(s)\n\n\nComputes mean time of the signal.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.padded-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T,1},Any}} where N where T","page":"Basic signal analysis","title":"SignalAnalysis.padded","text":"padded(s, padding; delay, fill)\n\n\nGenerates a padded view of a signal with optional delay/advance.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.rmsbandwidth-Union{Tuple{AbstractArray{T,2} where T}, Tuple{T}} where T","page":"Basic signal analysis","title":"SignalAnalysis.rmsbandwidth","text":"rmsbandwidth(s; fs, nfft, window)\n\n\nComputes RMS bandwidth of a signal.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.rmsduration-Tuple{SampledSignals.SampleBuf}","page":"Basic signal analysis","title":"SignalAnalysis.rmsduration","text":"rmsduration(s)\n\n\nComputes RMS duration of the signal.\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.slide","page":"Basic signal analysis","title":"SignalAnalysis.slide","text":"slide(f, s, nframes)\nslide(f, s, nframes, overlap, args; showprogress)\n\n\nSlides a window over a signal, processing each window. If the total number of frames in the signal is not an integral multiple of nframes, the last incomplete block of samples remains unprocessed.\n\nThe processing function receives a view on the original signal, and therefore may modify the signal if desired.\n\nExamples:\n\njulia> x = signal(ones(1000), 8kHz);\njulia> slide(x, 250) do x1, blknum, firstframe\n         println(size(x1), \", \", blknum, \", \", firstframe)\n       end\n(250,), 1, 1\n(250,), 2, 251\n(250,), 3, 501\n(250,), 4, 751\n\njulia> slide(x, 250) do x1, blknum, firstframe\n         x1 .= blknum\n       end\n\njulia> x[1], x[251], x[501], x[751]\n(1.0, 2.0, 3.0, 4.0)\n\n\n\n\n\n","category":"function"},{"location":"basic.html#SignalAnalysis.slide-Union{Tuple{T}, Tuple{Function,Type{T},AbstractArray{T,1} where T,Any}, Tuple{Function,Type{T},AbstractArray{T,1} where T,Any,Any,Vararg{Any,N} where N}} where T","page":"Basic signal analysis","title":"SignalAnalysis.slide","text":"slide(f, , s, nframes)\nslide(f, , s, nframes, overlap, args; showprogress)\n\n\nSlides a window over a signal, processing each window, and collecting the results. If the total number of frames in the signal is not an integral multiple of nframes, the last incomplete block of samples remains unprocessed.\n\nExamples:\n\njulia> x = signal(ones(1000), 8kHz);\njulia> slide(Float32, x, 250) do x1, blknum, firstframe\n         sum(x1)*blknum\n       end\n4-element Array{Float32,1}:\n  250.0\n  500.0\n  750.0\n 1000.0\n\njulia> slide(Tuple{Int,Float64}, x, 250) do x1, blknum, firstframe\n          (blknum, sum(x1)*blknum)\n        end\n4-element Array{Tuple{Int64,Float64},1}:\n  (1, 250.0)\n  (2, 500.0)\n  (3, 750.0)\n  (4, 1000.0)\n\n\n\n\n\n","category":"method"},{"location":"basic.html#SignalAnalysis.toframe-Tuple{Any,SampledSignals.SampleBuf}","page":"Basic signal analysis","title":"SignalAnalysis.toframe","text":"toframe(t, s)\n\n\nConverts time to signal frame number.\n\nExamples:\n\njulia> x = signal(randn(2000), 8kHz);\njulia> toframe(0.2s, x)\n1601\n\njulia> toframe([0.2s, 201ms], x)\n2-element Array{Int64,1}:\n 1601\n 1609\n\njulia> toframe(0.2:0.01:0.3, x)\n 11-element Array{Int64,1}:\n  1601\n  1681\n  1761\n   ⋮\n\n\n\n\n\n","category":"method"},{"location":"signals.html#Creating-and-managing-signals-1","page":"Creating & managing signals","title":"Creating & managing signals","text":"","category":"section"},{"location":"signals.html#","page":"Creating & managing signals","title":"Creating & managing signals","text":"Modules = [SignalAnalysis]\nPages   = [\"signals.jl\"]","category":"page"},{"location":"signals.html#SignalAnalysis.analytic-Tuple{SampledSignals.SampleBuf}","page":"Creating & managing signals","title":"SignalAnalysis.analytic","text":"analytic(s)\n\n\nConverts a signal to analytic representation.\n\n\n\n\n\n","category":"method"},{"location":"signals.html#SignalAnalysis.isanalytic-Tuple{Any}","page":"Creating & managing signals","title":"SignalAnalysis.isanalytic","text":"isanalytic(s)\n\n\nChecks if a signal is analytic.\n\n\n\n\n\n","category":"method"},{"location":"signals.html#SignalAnalysis.samples-Tuple{SampledSignals.SampleBuf}","page":"Creating & managing signals","title":"SignalAnalysis.samples","text":"samples(s)\n\n\nGets the underlying samples in the signal.\n\n\n\n\n\n","category":"method"},{"location":"signals.html#SignalAnalysis.signal-Tuple{AbstractArray,Any}","page":"Creating & managing signals","title":"SignalAnalysis.signal","text":"signal(x, fs)\n\n\nCreates a signal with frame rate fs.\n\n\n\n\n\n","category":"method"},{"location":"signals.html#SignalAnalysis.signal-Tuple{SampledSignals.SampleBuf,Any}","page":"Creating & managing signals","title":"SignalAnalysis.signal","text":"signal(x, fs)\n\n\nCreates a signal with frame rate fs. If the original signal's frame rate is the same as fs, this method simply returns the original signal. Otherwise, it creates a new signal with the specified frame rate and data from the original signal. Do note that this method does not resample the signal.\n\n\n\n\n\n","category":"method"},{"location":"signals.html#SignalAnalysis.@rate-Tuple{Any,Any}","page":"Creating & managing signals","title":"SignalAnalysis.@rate","text":"@rate fs expr\n\nCreates a signal from expr with frame rate fs. It provides syntactic sugar on the signal method.\n\nExample:\n\njulia> x = @rate 44.1kHz randn(44100)\n44100-frame, 1-channel SampleBuf{Float64, 1}\n1.0s sampled at 44100.0Hz\n\n\n\n\n\n","category":"macro"},{"location":"signals.html#SignalAnalysis.@samerateas-Tuple{Any,Any,Any}","page":"Creating & managing signals","title":"SignalAnalysis.@samerateas","text":"@samerateas n x expr\n\nCreates a signal from expr with the a frame rate n times that of signal x.\n\nExamples:\n\njulia> x = @rate 44.1kHz randn(44100)\n44100-frame, 1-channel SampleBuf{Float64, 1}\n1.0s sampled at 44100.0Hz\n\njulia> y = @samerateas 1//2 x x[1:2:end]\n22050-frame, 1-channel SampleBuf{Float64, 1}\n1.0s sampled at 22050.0Hz\n\njulia> y = @samerateas 2//3 x resample(x, 2//3)\n29400-frame, 1-channel SampleBuf{Float64, 1}\n1.0s sampled at 29400.0Hz\n\n\n\n\n\n","category":"macro"},{"location":"signals.html#SignalAnalysis.@samerateas-Tuple{Any,Any}","page":"Creating & managing signals","title":"SignalAnalysis.@samerateas","text":"@samerateas x expr\n\nCreates a signal from expr with the same frame rate as signal x. This is useful to preserve frame rate metadata across functions that do not return a signal.\n\nExamples:\n\njulia> x = @rate 44.1kHz randn(44100)\n44100-frame, 1-channel SampleBuf{Float64, 1}\n1.0s sampled at 44100.0Hz\n\njulia> y = filt([1.0,0.5], x)     # frame rate stripped by DSP.filt\n44100-element Array{Float64,1}:\n   ⋮\n\njulia> y = @samerateas x filt([1.0,0.5], x)\n44100-frame, 1-channel SampleBuf{Float64, 1}\n1.0s sampled at 44100.0Hz\n\n\n\n\n\n","category":"macro"},{"location":"plot.html#Plot-recipes-1","page":"Plot recipes","title":"Plot recipes","text":"","category":"section"},{"location":"plot.html#","page":"Plot recipes","title":"Plot recipes","text":"[ TODO ]","category":"page"},{"location":"dsp.html#Signal-processing-1","page":"Signal processing","title":"Signal processing","text":"","category":"section"},{"location":"dsp.html#","page":"Signal processing","title":"Signal processing","text":"Modules = [SignalAnalysis]\nPages   = [\"dsp.jl\"]","category":"page"},{"location":"dsp.html#SignalAnalysis.demon-Tuple{Any}","page":"Signal processing","title":"SignalAnalysis.demon","text":"demon(x; fs, downsample, method, cutoff)\n\n\nEstimates DEMON spectrum. The output is highpass filtered with a cutoff frequency and downsampled. Supported downsampling methods are :rms (default), :mean and :fir.\n\n\n\n\n\n","category":"method"},{"location":"dsp.html#SignalAnalysis.fir","page":"Signal processing","title":"SignalAnalysis.fir","text":"fir(n, f1)\nfir(n, f1, f2; fs, method)\n\n\nDesigns a n-tap FIR filter with a passband from f1 to f2 using the specified method. If frame rate fs is not specified, f1 and f2 are given in normalized units (1.0 being Nyquist). If f1 is 0, the designed filter is a lowpass filter, and if f2 is nothing then it is a highpass filter.\n\nThis method is a convenience wrapper around DSP.digitalfilter.\n\nExamples:\n\njulia> lpf = fir(127, 0, 10kHz; fs=44.1kHz)   # design a lowpass filter\n127-element Array{Float64,1}:\n  ⋮\n\njulia> hpf = fir(127, 10kHz; fs=44.1kHz)      # design a highpass filter\n127-element Array{Float64,1}:\n  ⋮\n\njulia> bpf = fir(127, 1kHz, 5kHz; fs=44.1kHz) # design a bandpass filter\n127-element Array{Float64,1}:\n  ⋮\n\n\n\n\n\n","category":"function"},{"location":"dsp.html#SignalAnalysis.removedc!-Tuple{Any}","page":"Signal processing","title":"SignalAnalysis.removedc!","text":"removedc!(s; α)\n\n\nDC removal filter. Parameter α controls the cutoff frequency. Implementation based on Lyons 2011 (3rd ed) real-time DC removal filter in Fig. 13-62(d).\n\nSee also: removedc\n\n\n\n\n\n","category":"method"},{"location":"dsp.html#SignalAnalysis.removedc-Tuple{Any}","page":"Signal processing","title":"SignalAnalysis.removedc","text":"removedc(s; α)\n\n\nDC removal filter. Parameter α controls the cutoff frequency. Implementation based on Lyons 2011 (3rd ed) real-time DC removal filter in Fig. 13-62(d).\n\nSee also: removedc!\n\n\n\n\n\n","category":"method"},{"location":"index.html#SignalAnalysis-1","page":"Home","title":"SignalAnalysis","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = SignalAnalysis","category":"page"},{"location":"rand.html#Random-signals-1","page":"Random signals","title":"Random signals","text":"","category":"section"},{"location":"rand.html#","page":"Random signals","title":"Random signals","text":"[ TODO ]","category":"page"}]
}
